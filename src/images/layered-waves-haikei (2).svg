<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 900 200" width="900" height="200" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script><path d="M0 63L13.7 66.5C27.3 70 54.7 77 82 78.7C109.3 80.3 136.7 76.7 163.8 72.3C191 68 218 63 245.2 63.5C272.3 64 299.7 70 327 71.5C354.3 73 381.7 70 409 66.5C436.3 63 463.7 59 491 59.8C518.3 60.7 545.7 66.3 573 70.7C600.3 75 627.7 78 654.8 79.7C682 81.3 709 81.7 736.2 82.7C763.3 83.7 790.7 85.3 818 84.7C845.3 84 872.7 81 886.3 79.5L900 78L900 201L886.3 201C872.7 201 845.3 201 818 201C790.7 201 763.3 201 736.2 201C709 201 682 201 654.8 201C627.7 201 600.3 201 573 201C545.7 201 518.3 201 491 201C463.7 201 436.3 201 409 201C381.7 201 354.3 201 327 201C299.7 201 272.3 201 245.2 201C218 201 191 201 163.8 201C136.7 201 109.3 201 82 201C54.7 201 27.3 201 13.7 201L0 201Z" fill="#bda2dd"/><path d="M0 116L13.7 114.3C27.3 112.7 54.7 109.3 82 105.5C109.3 101.7 136.7 97.3 163.8 97.5C191 97.7 218 102.3 245.2 106.3C272.3 110.3 299.7 113.7 327 112.7C354.3 111.7 381.7 106.3 409 104C436.3 101.7 463.7 102.3 491 104C518.3 105.7 545.7 108.3 573 110C600.3 111.7 627.7 112.3 654.8 110.7C682 109 709 105 736.2 101.5C763.3 98 790.7 95 818 95.5C845.3 96 872.7 100 886.3 102L900 104L900 201L886.3 201C872.7 201 845.3 201 818 201C790.7 201 763.3 201 736.2 201C709 201 682 201 654.8 201C627.7 201 600.3 201 573 201C545.7 201 518.3 201 491 201C463.7 201 436.3 201 409 201C381.7 201 354.3 201 327 201C299.7 201 272.3 201 245.2 201C218 201 191 201 163.8 201C136.7 201 109.3 201 82 201C54.7 201 27.3 201 13.7 201L0 201Z" fill="#b18bde"/><path d="M0 140L13.7 137.7C27.3 135.3 54.7 130.7 82 131.2C109.3 131.7 136.7 137.3 163.8 140.3C191 143.3 218 143.7 245.2 142.3C272.3 141 299.7 138 327 138.3C354.3 138.7 381.7 142.3 409 142.5C436.3 142.7 463.7 139.3 491 136.7C518.3 134 545.7 132 573 132.2C600.3 132.3 627.7 134.7 654.8 133.7C682 132.7 709 128.3 736.2 127.8C763.3 127.3 790.7 130.7 818 132.7C845.3 134.7 872.7 135.3 886.3 135.7L900 136L900 201L886.3 201C872.7 201 845.3 201 818 201C790.7 201 763.3 201 736.2 201C709 201 682 201 654.8 201C627.7 201 600.3 201 573 201C545.7 201 518.3 201 491 201C463.7 201 436.3 201 409 201C381.7 201 354.3 201 327 201C299.7 201 272.3 201 245.2 201C218 201 191 201 163.8 201C136.7 201 109.3 201 82 201C54.7 201 27.3 201 13.7 201L0 201Z" fill="#a574de"/><path d="M0 155L13.7 158.3C27.3 161.7 54.7 168.3 82 168.2C109.3 168 136.7 161 163.8 160.7C191 160.3 218 166.7 245.2 170.7C272.3 174.7 299.7 176.3 327 176.8C354.3 177.3 381.7 176.7 409 173.7C436.3 170.7 463.7 165.3 491 162.8C518.3 160.3 545.7 160.7 573 160.3C600.3 160 627.7 159 654.8 162.3C682 165.7 709 173.3 736.2 174.3C763.3 175.3 790.7 169.7 818 166.5C845.3 163.3 872.7 162.7 886.3 162.3L900 162L900 201L886.3 201C872.7 201 845.3 201 818 201C790.7 201 763.3 201 736.2 201C709 201 682 201 654.8 201C627.7 201 600.3 201 573 201C545.7 201 518.3 201 491 201C463.7 201 436.3 201 409 201C381.7 201 354.3 201 327 201C299.7 201 272.3 201 245.2 201C218 201 191 201 163.8 201C136.7 201 109.3 201 82 201C54.7 201 27.3 201 13.7 201L0 201Z" fill="#975cde"/></svg>